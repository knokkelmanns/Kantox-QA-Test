{
	"info": {
		"_postman_id": "31b0a888-11c2-4784-a911-8960b5aa8d23",
		"name": "QA Test Task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14753207"
	},
	"item": [
		{
			"name": "GET /posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each post has required properties\", function () {",
							"    const posts = pm.response.json();",
							"    posts.forEach(post => {",
							"        pm.expect(post).to.have.property('id');",
							"        pm.expect(post).to.have.property('title');",
							"        pm.expect(post).to.have.property('author');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Object contains the correct id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));",
							"});",
							"",
							"pm.test(\"Object has required properties\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('author');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response contains id\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"postId\", jsonData.id); ",
							"});",
							"",
							"pm.test(\"Response contains created post data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(\"New Post\");",
							"    pm.expect(jsonData.author).to.eql(\"Author\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"New Post\",\n    \"author\": \"Author\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains updated title\", function () {",
							"    pm.expect(pm.response.json().title).to.eql(\"Updated Post\");",
							"});",
							"",
							"pm.test(\"Response contains updated author\", function () {",
							"    pm.expect(pm.response.json().author).to.eql(\"Updated Author\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Post\",\n    \"author\": \"Updated Author\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deleted post no longer exists\", function () {",
							"    const baseUrl = pm.collectionVariables.get(\"baseUrl\");",
							"    const postId = pm.collectionVariables.get(\"postId\");",
							"    const url = `${baseUrl}/posts/${postId}`;",
							"    ",
							"    pm.sendRequest(url, function (err, res) {",
							"        pm.expect(res).to.have.status(404);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/{{postId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each comment has required properties\", function () {",
							"    const comments = pm.response.json();",
							"    comments.forEach(comment => {",
							"        pm.expect(comment).to.have.property('id');",
							"        pm.expect(comment).to.have.property('body');",
							"        pm.expect(comment).to.have.property('postId');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /comments/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Object contains correct id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"commentId\"));",
							"});",
							"",
							"pm.test(\"Object has required properties\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('body');",
							"    pm.expect(jsonData).to.have.property('postId');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response contains id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.collectionVariables.set(\"commentId\", jsonData.id);",
							"});",
							"",
							"pm.test(\"Response contains created post data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.body).to.eql(\"New Comment\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"body\": \"New Comment\",\n    \"postId\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /comments/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains updated body\", function () {",
							"    pm.expect(pm.response.json().body).to.eql(\"Updated Comment\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"body\": \"Updated Comment\",\n    \"postId\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /comments/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Deleted comment no longer exists\", function () {",
							"    const baseUrl = pm.collectionVariables.get(\"baseUrl\");",
							"    const commentId = pm.collectionVariables.get(\"commentId\");",
							"    const url = `${baseUrl}/comments/${commentId}`;",
							"    ",
							"    pm.sendRequest(url, function (err, res) {",
							"        pm.expect(res).to.have.status(404);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/{{commentId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"{{commentId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains name\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('name');",
							"});",
							"",
							"pm.test(\"Name is correct\", function () {",
							"    pm.expect(pm.response.json().name).to.eql(\"typicode\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		}
	]
}